// Code generated by protoc-gen-go. DO NOT EDIT.
// source: xtest.proto

package grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type XtestRequest struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtestRequest) Reset()         { *m = XtestRequest{} }
func (m *XtestRequest) String() string { return proto.CompactTextString(m) }
func (*XtestRequest) ProtoMessage()    {}
func (*XtestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a23ca54e74c8831b, []int{0}
}

func (m *XtestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtestRequest.Unmarshal(m, b)
}
func (m *XtestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtestRequest.Marshal(b, m, deterministic)
}
func (m *XtestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtestRequest.Merge(m, src)
}
func (m *XtestRequest) XXX_Size() int {
	return xxx_messageInfo_XtestRequest.Size(m)
}
func (m *XtestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_XtestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_XtestRequest proto.InternalMessageInfo

func (m *XtestRequest) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type XtestResponse struct {
	Content              string   `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *XtestResponse) Reset()         { *m = XtestResponse{} }
func (m *XtestResponse) String() string { return proto.CompactTextString(m) }
func (*XtestResponse) ProtoMessage()    {}
func (*XtestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a23ca54e74c8831b, []int{1}
}

func (m *XtestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_XtestResponse.Unmarshal(m, b)
}
func (m *XtestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_XtestResponse.Marshal(b, m, deterministic)
}
func (m *XtestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_XtestResponse.Merge(m, src)
}
func (m *XtestResponse) XXX_Size() int {
	return xxx_messageInfo_XtestResponse.Size(m)
}
func (m *XtestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_XtestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_XtestResponse proto.InternalMessageInfo

func (m *XtestResponse) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*XtestRequest)(nil), "grpc.XtestRequest")
	proto.RegisterType((*XtestResponse)(nil), "grpc.XtestResponse")
}

func init() { proto.RegisterFile("xtest.proto", fileDescriptor_a23ca54e74c8831b) }

var fileDescriptor_a23ca54e74c8831b = []byte{
	// 121 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xae, 0x28, 0x49, 0x2d,
	0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x49, 0x2f, 0x2a, 0x48, 0x56, 0xd2, 0xe0,
	0xe2, 0x89, 0x00, 0x09, 0x06, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x49, 0x70, 0xb1, 0x27,
	0xe7, 0xe7, 0x95, 0xa4, 0xe6, 0x95, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xb8, 0x4a,
	0x9a, 0x5c, 0xbc, 0x50, 0x95, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xb8, 0x95, 0x1a, 0x59, 0x73,
	0xb1, 0x82, 0x95, 0x0a, 0x19, 0xc1, 0x18, 0x42, 0x7a, 0x20, 0xdb, 0xf4, 0x90, 0xad, 0x92, 0x12,
	0x46, 0x11, 0x83, 0x18, 0xaa, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0x9e, 0x31, 0x20, 0x00, 0x00, 0xff,
	0xff, 0x03, 0x33, 0x0f, 0xe1, 0xad, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// XtestClient is the client API for Xtest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type XtestClient interface {
	Xtest(ctx context.Context, in *XtestRequest, opts ...grpc.CallOption) (*XtestResponse, error)
}

type xtestClient struct {
	cc *grpc.ClientConn
}

func NewXtestClient(cc *grpc.ClientConn) XtestClient {
	return &xtestClient{cc}
}

func (c *xtestClient) Xtest(ctx context.Context, in *XtestRequest, opts ...grpc.CallOption) (*XtestResponse, error) {
	out := new(XtestResponse)
	err := c.cc.Invoke(ctx, "/grpc.Xtest/Xtest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// XtestServer is the server API for Xtest service.
type XtestServer interface {
	Xtest(context.Context, *XtestRequest) (*XtestResponse, error)
}

// UnimplementedXtestServer can be embedded to have forward compatible implementations.
type UnimplementedXtestServer struct {
}

func (*UnimplementedXtestServer) Xtest(ctx context.Context, req *XtestRequest) (*XtestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Xtest not implemented")
}

func RegisterXtestServer(s *grpc.Server, srv XtestServer) {
	s.RegisterService(&_Xtest_serviceDesc, srv)
}

func _Xtest_Xtest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XtestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(XtestServer).Xtest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Xtest/Xtest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(XtestServer).Xtest(ctx, req.(*XtestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Xtest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Xtest",
	HandlerType: (*XtestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Xtest",
			Handler:    _Xtest_Xtest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xtest.proto",
}
